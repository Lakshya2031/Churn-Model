# -*- coding: utf-8 -*-
"""Untitled75h.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Aqp0lb-GpeEXNWMqJRyaNOmDgkjf9hSj
"""

import streamlit as st
import pandas as pd
import joblib
import numpy as np

# ========================
# Load saved model & transformer
# ========================
# Make sure these files are in the same folder as app.py
model = joblib.load("rf_model.pkl")
transform = joblib.load("transform.pkl")

# ========================
# Streamlit UI
# ========================
st.title("üìä Customer Churn Prediction App")
st.write("Fill in customer details to predict churn (Yes/No).")

# Input fields
gender = st.selectbox("Gender", ["Male", "Female"])
senior_citizen = st.selectbox("Senior Citizen", [0, 1])
partner = st.selectbox("Partner", ["Yes", "No"])
dependents = st.selectbox("Dependents", ["Yes", "No"])
tenure = st.number_input("Tenure (months)", min_value=0, max_value=100, value=1)
phone_service = st.selectbox("Phone Service", ["Yes", "No"])
multiple_lines = st.selectbox("Multiple Lines", ["Yes", "No", "No phone service"])
internet_service = st.selectbox("Internet Service", ["DSL", "Fiber optic", "No"])
online_security = st.selectbox("Online Security", ["Yes", "No", "No internet service"])
online_backup = st.selectbox("Online Backup", ["Yes", "No", "No internet service"])
device_protection = st.selectbox("Device Protection", ["Yes", "No", "No internet service"])
tech_support = st.selectbox("Tech Support", ["Yes", "No", "No internet service"])
streaming_tv = st.selectbox("Streaming TV", ["Yes", "No", "No internet service"])
streaming_movies = st.selectbox("Streaming Movies", ["Yes", "No", "No internet service"])
contract = st.selectbox("Contract", ["Month-to-month", "One year", "Two year"])
paperless_billing = st.selectbox("Paperless Billing", ["Yes", "No"])
payment_method = st.selectbox(
    "Payment Method",
    ["Electronic check", "Mailed check", "Bank transfer (automatic)", "Credit card (automatic)"]
)
monthly_charges = st.number_input("Monthly Charges", min_value=0.0, value=50.0)
total_charges = st.number_input("Total Charges", min_value=0.0, value=100.0)

# ========================
# Prepare input
# ========================
sample = {
    'gender': gender,
    'SeniorCitizen': senior_citizen,
    'Partner': partner,
    'Dependents': dependents,
    'tenure': tenure,
    'PhoneService': phone_service,
    'MultipleLines': multiple_lines,
    'InternetService': internet_service,
    'OnlineSecurity': online_security,
    'OnlineBackup': online_backup,
    'DeviceProtection': device_protection,
    'TechSupport': tech_support,
    'StreamingTV': streaming_tv,
    'StreamingMovies': streaming_movies,
    'Contract': contract,
    'PaperlessBilling': paperless_billing,
    'PaymentMethod': payment_method,
    'MonthlyCharges': monthly_charges,
    'TotalCharges': total_charges
}

df_sample = pd.DataFrame([sample])

# ========================
# Predict
# ========================
if st.button("üîç Predict Churn"):
    try:
        # Transform the input
        X_transformed = transform.transform(df_sample)
        # Predict
        pred = model.predict(X_transformed)[0]
        proba = model.predict_proba(X_transformed)

        st.subheader("Prediction Result")
        if pred == 1:
            st.error(f"‚ö†Ô∏è Churn: Yes  |  Probability: {round(proba[0][1]*100,2)}%")
        else:
            st.success(f"‚úÖ Churn: No  |  Probability: {round(proba[0][0]*100,2)}%")
    except Exception as e:
        st.error(f"Error during prediction: {e}")

